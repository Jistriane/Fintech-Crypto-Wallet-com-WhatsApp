name: Deploy to Staging

on:
  push:
    branches:
      - staging

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fintech-crypto-wallet

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push KYC service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: services/kyc/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/kyc:staging-${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build and push DeFi service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: services/defi/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/defi:staging-${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build and push Liquidity service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: services/liquidity/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/liquidity:staging-${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy CloudFormation stack
        run: |
          chmod +x ./scripts/deploy-staging.sh
          ./scripts/deploy-staging.sh

      - name: Update ECS services
        run: |
          for service in kyc defi liquidity; do
            aws ecs update-service \
              --cluster fintech-crypto-wallet-staging \
              --service $service \
              --force-new-deployment
          done

      - name: Wait for services to stabilize
        run: |
          for service in kyc defi liquidity; do
            aws ecs wait services-stable \
              --cluster fintech-crypto-wallet-staging \
              --services $service
          done

      - name: Run database migrations
        run: |
          for service in kyc defi liquidity; do
            aws ecs run-task \
              --cluster fintech-crypto-wallet-staging \
              --task-definition $service-migration \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-xxxxx],securityGroups=[sg-xxxxx]}" \
              --launch-type FARGATE
          done

      - name: Notify on success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'staging-deploys'
          slack-message: "Deploy to staging successful! :rocket:\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'staging-deploys'
          slack-message: "Deploy to staging failed! :x:\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
