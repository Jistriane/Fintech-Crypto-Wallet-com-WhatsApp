name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Run ESLint
        run: yarn lint

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: fintech_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Run unit tests
        run: yarn test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fintech_test
          REDIS_URL: redis://localhost:6379
          MASTER_KEY: test_master_key
          JWT_SECRET: test_jwt_secret
          NOTUS_API_KEY: test_notus_key
          POLYGON_RPC_URL: http://localhost:8545
          BSC_RPC_URL: http://localhost:8546
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and run tests
        run: docker-compose -f docker-compose.test.yml up --build --exit-code-from test-runner
        env:
          NODE_ENV: test
          MASTER_KEY: test_master_key
          JWT_SECRET: test_jwt_secret
          NOTUS_API_KEY: test_notus_key
      
      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/integration/lcov.info
          flags: integration
          name: codecov-integration
          fail_ci_if_error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push KYC service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./services/kyc/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fintech-kyc:${{ github.sha }}
      
      - name: Build and push DeFi service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./services/defi/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fintech-defi:${{ github.sha }}
      
      - name: Build and push Liquidity service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./services/liquidity/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fintech-liquidity:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update ECS services
        run: |
          aws ecs update-service --cluster staging --service kyc-service --force-new-deployment
          aws ecs update-service --cluster staging --service defi-service --force-new-deployment
          aws ecs update-service --cluster staging --service liquidity-service --force-new-deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update ECS services
        run: |
          aws ecs update-service --cluster production --service kyc-service --force-new-deployment
          aws ecs update-service --cluster production --service defi-service --force-new-deployment
          aws ecs update-service --cluster production --service liquidity-service --force-new-deployment
