version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    configs:
      - source: nginx_config
      - target: /etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # Serviço KYC
  kyc-service:
    image: ${REGISTRY}/kyc-service:${TAG:-latest}
    env_file: ./config/${ENV:-prod}/.env-${ENV:-prod}
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.kyc.rule=PathPrefix(`/api/v1/kyc`)"
      update_config:
        monitor: 60s
        failure_action: rollback
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Serviço DeFi
  defi-service:
    image: ${REGISTRY}/defi-service:${TAG:-latest}
    env_file: ./config/${ENV:-prod}/.env-${ENV:-prod}
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.defi.rule=PathPrefix(`/api/v1/defi`)"
      update_config:
        monitor: 60s
        failure_action: rollback
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Serviço Liquidity
  liquidity-service:
    image: ${REGISTRY}/liquidity-service:${TAG:-latest}
    env_file: ./config/${ENV:-prod}/.env-${ENV:-prod}
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.liquidity.rule=PathPrefix(`/api/v1/liquidity`)"
      update_config:
        monitor: 60s
        failure_action: rollback
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Master
  postgres-master:
    image: postgres:14-alpine
    env_file: ./config/${ENV:-prod}/.env-${ENV:-prod}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Replica
  postgres-replica:
    image: postgres:14-alpine
    env_file: ./config/${ENV:-prod}/.env-${ENV:-prod}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Master
  redis-master:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_master_data:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Replica
  redis-replica:
    image: redis:6-alpine
    command: redis-server --slaveof redis-master 6379
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

configs:
  nginx_config:
    file: ./docker/nginx/nginx.conf

volumes:
  postgres_master_data:
  postgres_replica_data:
  redis_master_data:

networks:
  backend:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
