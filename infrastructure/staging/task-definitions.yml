Resources:
  # KYC Service Task Definition
  KYCTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Environment}-kyc
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !Ref ECSTaskRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: kyc
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kyc:${Environment}
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: staging
            - Name: DATABASE_URL
              Value: !Sub postgresql://${DatabaseUsername}:${DatabasePassword}@${Database.Endpoint.Address}:5432/fintech
            - Name: REDIS_URL
              Value: !Sub redis://${RedisCluster.PrimaryEndPoint.Address}:6379
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kyc
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3

  # DeFi Service Task Definition
  DeFiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Environment}-defi
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !Ref ECSTaskRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: defi
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/defi:${Environment}
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: staging
            - Name: DATABASE_URL
              Value: !Sub postgresql://${DatabaseUsername}:${DatabasePassword}@${Database.Endpoint.Address}:5432/fintech
            - Name: REDIS_URL
              Value: !Sub redis://${RedisCluster.PrimaryEndPoint.Address}:6379
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: defi
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3

  # Liquidity Service Task Definition
  LiquidityTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Environment}-liquidity
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !Ref ECSTaskRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: liquidity
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/liquidity:${Environment}
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: staging
            - Name: DATABASE_URL
              Value: !Sub postgresql://${DatabaseUsername}:${DatabasePassword}@${Database.Endpoint.Address}:5432/fintech
            - Name: REDIS_URL
              Value: !Sub redis://${RedisCluster.PrimaryEndPoint.Address}:6379
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: liquidity
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
